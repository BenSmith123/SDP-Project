<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4000</depth>
  <persistent>0</persistent>
  <parentName>parent_player</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    name = "Drone"
    level = 1
    maxhp = 10
    attack = 5
    defence = 0
    accuracy = 5
    
    aggressive = true // move/attack an enemy when enemy is unprovoked
    
    // sprites
    sprite_stand = spr_drone_walking
    sprite_walk = spr_drone_walking
    sprite_jump = spr_drone
    sprite_dead = spr_drone_dead
    sprite_attack = spr_drone_walking
    
    walkspeed = 4
    jump = 0
    heal_time = 4 // (seconds)
    heal_amount = 0 
    
    scr_ai_initialise() // call the script to initialise all the common variables of the AI 
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // DEAD BODY FOR AI
    dead_body = instance_create(x,y,obj_ai_dead) // create body at x,y position
    dead_body.sprite_index = sprite_dead // set the sprite of the AI dead body
    dead_body.image_xscale = image_xscale // face the dead body sprite the same way as AI was facing
    
    dead_body.hspeed = hspeed // knock back ai body on last hit (continue physics)
    dead_body.vspeed = vspeed 
    
    dead_body.friction = friction // knock back as far as the ai would have already been knocked back
    
    
    // if not killed by player, dont create coins, add to stats or give experience
    if soft_kill = true 
    {
        global.current_kills += 1 // add count to statistics
        global.experience += 10 // add experience to the player
        
        scr_level_up() // run the level up script (check player for level up)
        
        // CREATE COINS
        coin_num = irandom_range(0,10) // generate a random number between 0-10
        repeat(coin_num) // create the num of coins from the random number ^^
        {
            coin = instance_create(x,y,obj_coin) // create coin object at current position
            // make the coins spread evenly/randomly
            coin.hspeed = irandom_range(-3,3) // move the coin left or right (random range for different coin positions)
            coin.vspeed = irandom_range(-2,-4) // move the coin up
        }
    }
    
    
    if !is_on_screen(self) 
    {
        // if this object is not on screen, freeze it
    }
    
    with obj_heal_text instance_destroy() // delete the healing text object if the AI was healing



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
attacking = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
heal_text = instance_create(x,y,obj_heal_text)
heal_text.target = id
heal_text.heal_amount = heal_amount

hp += heal_amount

if hp &gt; maxhp
{
    hp = maxhp
}
else
{
    alarm[3] = heal_time *room_speed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
can_turn = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ? unfinished
if position_meeting(block.x-24,block.y,obj_block)
{
    leftx += 24
    platform_width += 24
}           

if position_meeting(block2.x+24,block2.y,obj_block)
{
    rightx += 24
    platform_width += 24
}

alarm[1] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
can_shoot = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // RUN ALL AI SCRIPTS 
    
    scr_gravity()
    
    scr_ai_movement()
    
    scr_ai_attack()
    
    scr_ai_block_jump()
    
    scr_ai_spread() // not finished
    
    scr_ai_meet_horizontal_y()
    
    scr_ai_meet_verticle_x()
    
    scr_ai_detect_platform_width() // not finished
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block_main">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (vspeed &gt; 0 &amp;&amp; !place_free(x,y+vspeed))
{
    move_contact_solid(270,2)
} 

vspeed = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
damage = attack-irandom_range(0,accuracy) // calcuelate damage

scr_ai_damage(other)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /*********************************************************
    * This code handles all the graphics and graphic functions of the AI
    * This code is constantly run while the AI object exists
    * non-built in variables are set by the AI initialize code
    **********************************************************/
    
    scr_ai_debug() // turn on the debug information
    scr_text_1() // set the text style that was pre-defined 
    
    // DRAW THE NAME TAG
    // position based on the mask index (cause all AI different size)
    name_tag_x = x-string_width(name)/2 // x position of the name tag
    
    // function takes parameters (sprite, index, x, y, width, height)
    draw_sprite_stretched(spr_name_label, 0, name_tag_x, y+54, string_width(name), 20) // label background (black)
    draw_text(x,y+54, name) // draw the text (white)
    // drawn at AI y position +54 so its drawn below the AI ^^^
     
    // HEALTH BAR
    if show_hp = true // only show the health bar if the AI is near the player
    {
        scr_text_4() // set the text style (bold, white)
    
        draw_sprite_stretched_ext(spr_ai_health_bar,health_colour,x-20,y+36,hp/maxhp*40,1,c_white,1) // health bar
        // 20 = half the sprite width
        // 40 = healthbar width
        // 1 = healthbar height
        draw_text(x,y+tag_y+44,string(hp))// + "/" + string(maxhp))
    }
    
    // SPRITE CHANGING (ORDER: last code overrides the rest)
    if stay = true {sprite_index = sprite_stand}
    if stay = false {sprite_index = sprite_walk}
    if place_free(x,y+1) // if not on the ground
    {sprite_index = sprite_jump} // jumping sprite
    if attacking = true {sprite_index = sprite_attack}
    
    // AI SPRITE
    // draw the sprite of the ai with all built in variables used by the ai functions 
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha) 
    
    // round the x and y position to avoid blurred graphics!
    // otherwise x and y can be placed between pixels, thus blurring the graphics
    x = round(x)
    y = round(y)
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
