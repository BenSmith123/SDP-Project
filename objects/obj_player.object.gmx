<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_jump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>0</persistent>
  <parentName>parent_player</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// set where the player first spawns in the room
global.player_start_x = x
global.player_start_y = y

if global.joystick_enabled = true {instance_create(x,y,obj_joystick)}


// CONSTANT
state = "-" // temporary (testing)
collision_distance = 5 // for when player is about to hit a block

// ATTRIBUTES

max_hp = global.max_hp

attack = global.attack
defence = global.defence

accuracy = global.accuracy

jump = global.jump
walk_speed = global.walk_speed

heal_time = global.heal_time // seconds
heal_amount = global.heal_amount



// IN-GAME
friction = 0.25
image_xscale = 1
image_yscale = 1
hp = global.max_hp
stance = "Spawn"
image_speed = 0.1
can_attack = true
attacking = false
wall_stop = false // stops getting stuck to walls
move_direction = "" // for when key or arrow is pressed
bullet = 0 // creating bullet object
can_be_hit = true // when the player can be hit again after taking damage
health_colour = 1 // colour of the healthbar, 1 = green
start_speed = global.walk_speed
can_second_jump = false // not related to double jump skill - if not on ground and hasnt already second jumped
name_width = round(string_width("Ben7")/2-10) // divide by 2 to get the middle, -10 for extra space on each side

head_x = 0 // the x position for the head (to match all player sprites)

// movement variables
move_left = false
move_right = false
move_jump = false
move_attack = false
move_temp = false // debug

initialise_skills() // set the skills based on player class

instance_create(x,y,obj_hud)





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.player_lives -= 1
// take away exp too

dead_body = instance_create(x,y,obj_player_dead)
dead_body.friction = friction
dead_body.hspeed = hspeed
dead_body.vspeed = vspeed
dead_body.image_xscale = image_xscale


// destroy controller obj if its enabled
if global.joystick_enabled = true {with (obj_joystick) instance_destroy()}

with arrow_key_parent instance_destroy()
with obj_hud instance_destroy()
with obj_heal_text instance_destroy()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_damage()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// heal the player



heal_text = instance_create(x,y,obj_heal_text)
heal_text.target = id
heal_text.heal_amount = heal_amount

hp += heal_amount

// update the colour of the target health bar
if target.hp &lt;= target.max_hp*0.6 {target.health_colour = 2}
if target.hp &lt;= target.max_hp*0.2 {target.health_colour = 3}
if target.hp &gt; target.max_hp*0.6 {target.health_colour = 1}


if hp &gt; max_hp
{
    hp = max_hp
}
else
{
    alarm[3] = heal_time *room_speed
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
can_be_hit = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
attacking = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
can_attack = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
move_direction = ""

target = obj_player

scr_camera()

scr_gravity()

scr_player_movement()

if hp &lt;= 0 
{
    instance_destroy()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block_main">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if other.solid = true
{
    if (vspeed &gt; 0 &amp;&amp; !place_free(x,y+vspeed))
    {
        move_contact_solid(270,2)
    } 
    vspeed = 0
    can_second_jump = true
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sprite_index = spr_player_heal

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sprite_index = spr_player_defend
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if x &gt; room_width
{
    room_goto_next()
}
else
{
    instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_text_1()

draw_sprite_stretched(spr_name_label,0,round(x-string_width(global.name)/2-10),y+34,string_width(global.name)+20,18) // name label
//draw_sprite_stretched(spr_name_label,0,x-name_width,y+34,string_width(global.name)+20,18) // name label


draw_text(x,y+44,global.name) // player name

//yoo = instance_nearest(x,instance_furthest(x,y,obj_block),obj_block)
//draw_sprite(spr_block_test,0,yoo.x,yoo.y)


x = round(x)
y = round(y)

above_block = instance_nearest(x,y-150,obj_block)

// debug
if distance_to_object(above_block) &lt; 100 {draw_sprite(spr_test,0,above_block.x,above_block.y)}


// draw the target arrow for melee attacks
enemy = instance_nearest(x,y,ai_parent)

if instance_exists(enemy)
{
    // MELEE ATTACKS
    if image_xscale = -1
    {
        if enemy.x &lt;= x
        {
            if enemy.x &gt; x-120 // range for hitting
            {
                draw_sprite(spr_test,0,enemy.x,enemy.y-30)
            }
        }
    }
    
    if image_xscale = 1
    {
        if enemy.x &gt; x
        {
            if enemy.x &lt; x+120 // range for hitting
            {
                draw_sprite(spr_test,0,enemy.x,enemy.y-30)
            }
        }
    }
}


//if place_meeting(x,y+1,obj_block) {vspeed = 0} // ? fixes sprite issue 



        
// draw the healthbar
draw_sprite_stretched_ext(spr_ai_health_bar,health_colour,x-32,y+60,hp/max_hp*64,1,c_white,1)
// 16 = half sprite width (for centering), 32 = healthbar width, 1 = healthbar height

// head
//draw_sprite_ext(spr_head,image_index,x+head_x,y-22,image_xscale,image_yscale,image_angle,image_blend,image_alpha)


if global.show_debug = true // debug text
{
    draw_set_halign(fa_center)
    draw_text(x,y-85,"s " +string(state))
    draw_text(x,y-70,"v: " +string(vspeed))
    draw_text(x,y-55,"h: " +string(round(hspeed)))
}



//if keyboard_check_released(ord('A')) or keyboard_check_released(ord('D'))
//{sprite_index=spr_player_stand exit}



if (hspeed = 0 &amp;&amp; vspeed = 0) { if not place_free(x,y+1) {sprite_index = spr_player_stand; state = "stand"}}

if (hspeed &lt; -1 || hspeed &gt; 1) {sprite_index = spr_player_walking}

if not (vspeed = 0) &amp;&amp; (hspeed &lt; -1 || hspeed &gt; 1) {sprite_index = spr_player_jump_right}

if not (vspeed = 0) &amp;&amp; (hspeed = 0) {sprite_index = spr_player_jump}


if attacking = true 
{
    sprite_index = attack_sprite
    if image_index = 1 {scr_damage()}//attacking = false}
}

//platform = place_meeting(x,y+1,obj_block)
//if place_meeting(x,y,platform)
//{if platform.solid = true {vspeed = 0}}


// body
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>object63</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,33</point>
    <point>33,33</point>
  </PhysicsShapePoints>
</object>
